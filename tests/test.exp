#!/usr/bin/env expect

# exp_internal 1
log_user 0

if {$argc != 1} {
    puts "usage: test.exp port"
    exit
}

if {[info exists env(BOARD)]} {
    set BOARD $env(BOARD)
} else {
    set BOARD "stm32f407-discovery"
}

set port $argv
set spawned [spawn -open [open $port w+]]
set baud 115200
set send_human { .01 .01 100 .005 .005 }

stty ispeed $baud ospeed $baud raw -echo cs8 -parenb -cstopb onlcr < $port

proc test_flow {str} {
    if {[log_user -info] == 0} { send_user $str }
}

proc test {name} {
    global current_test
    set current_test $name
    test_flow "test $name ... "
}

proc green {str} {
    return "\033\[01;32m$str\033\[1;0;40m"
}

proc red {str} {
    return "\033\[1;31;40m$str\033\[1;0;40m"
}

proc test_done { } {
    global current_test
    unset current_test
    test_flow [green "ok\n"]
}

proc reset {} {
    global BOARD
    system "openocd -s openocd/ -f $BOARD.cfg -c 'reset; exit' 2> /dev/null"
}

proc expect_exact {pattern} {
    expect {
        default {
            test_flow [red "FAIL\n"]
            error "\n\nTimed out waiting for \"$pattern\"\n";
            exit 1;
        }
        "^$pattern"
    }
}

proc expect_prompt {} {
    expect_exact "> "
}

proc send_command {cmd} {
    send -h -- "$cmd\r"
    expect "\n"
}

send_user "\n"

test "welcome prompt"
    reset
    expect_exact "*Welcome to bkernel!\r\n"
    expect_exact "Type 'help' to get a list of available commands.\r\n"
    expect_prompt
test_done

test "hi"
    send_command "hi"
    expect_exact "Hi, there!\r\n"
    expect_prompt
test_done

test "LED"
    send_command "-3"
    expect_prompt
    send_command "-4"
    expect_prompt
    send_command "-5"
    expect_prompt
    send_command "-6"
    expect_prompt

    send_command "+3"
    expect_prompt
    send_command "+4"
    expect_prompt
    send_command "+5"
    expect_prompt
    send_command "+6"
    expect_prompt
test_done

test "unknown command"
    send_command "+7"
    expect_exact "Unknown command\r\n"
    expect_prompt
test_done

send_user "\nAll tests are successful\n"
